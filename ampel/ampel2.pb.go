// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ampel2.proto

package ampel

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Color int32

const (
	Color_INV    Color = 0
	Color_GREEN  Color = 1
	Color_YELLOW Color = 2
	Color_RED    Color = 3
)

var Color_name = map[int32]string{
	0: "INV",
	1: "GREEN",
	2: "YELLOW",
	3: "RED",
}

var Color_value = map[string]int32{
	"INV":    0,
	"GREEN":  1,
	"YELLOW": 2,
	"RED":    3,
}

func (x Color) String() string {
	return proto.EnumName(Color_name, int32(x))
}

func (Color) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ccbe285bdc797369, []int{0}
}

type Col struct {
	Color                Color    `protobuf:"varint,1,opt,name=color,proto3,enum=ampel.Color" json:"color,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Col) Reset()         { *m = Col{} }
func (m *Col) String() string { return proto.CompactTextString(m) }
func (*Col) ProtoMessage()    {}
func (*Col) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccbe285bdc797369, []int{0}
}

func (m *Col) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Col.Unmarshal(m, b)
}
func (m *Col) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Col.Marshal(b, m, deterministic)
}
func (m *Col) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Col.Merge(m, src)
}
func (m *Col) XXX_Size() int {
	return xxx_messageInfo_Col.Size(m)
}
func (m *Col) XXX_DiscardUnknown() {
	xxx_messageInfo_Col.DiscardUnknown(m)
}

var xxx_messageInfo_Col proto.InternalMessageInfo

func (m *Col) GetColor() Color {
	if m != nil {
		return m.Color
	}
	return Color_INV
}

type Ack struct {
	Success              bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ack) Reset()         { *m = Ack{} }
func (m *Ack) String() string { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()    {}
func (*Ack) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccbe285bdc797369, []int{1}
}

func (m *Ack) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ack.Unmarshal(m, b)
}
func (m *Ack) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ack.Marshal(b, m, deterministic)
}
func (m *Ack) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ack.Merge(m, src)
}
func (m *Ack) XXX_Size() int {
	return xxx_messageInfo_Ack.Size(m)
}
func (m *Ack) XXX_DiscardUnknown() {
	xxx_messageInfo_Ack.DiscardUnknown(m)
}

var xxx_messageInfo_Ack proto.InternalMessageInfo

func (m *Ack) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterEnum("ampel.Color", Color_name, Color_value)
	proto.RegisterType((*Col)(nil), "ampel.col")
	proto.RegisterType((*Ack)(nil), "ampel.ack")
}

func init() {
	proto.RegisterFile("ampel2.proto", fileDescriptor_ccbe285bdc797369)
}

var fileDescriptor_ccbe285bdc797369 = []byte{
	// 213 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x49, 0xcc, 0x2d, 0x48,
	0xcd, 0x31, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0xf3, 0xa4, 0xa4, 0xd3, 0xf3,
	0xf3, 0xd3, 0x73, 0x52, 0xf5, 0xc1, 0x82, 0x49, 0xa5, 0x69, 0xfa, 0xa9, 0xb9, 0x05, 0x25, 0x95,
	0x10, 0x35, 0x4a, 0x9a, 0x5c, 0xcc, 0xc9, 0xf9, 0x39, 0x42, 0x4a, 0x5c, 0xac, 0xc9, 0xf9, 0x39,
	0xf9, 0x45, 0x12, 0x8c, 0x0a, 0x8c, 0x1a, 0x7c, 0x46, 0x3c, 0x7a, 0x60, 0xad, 0x7a, 0x60, 0xb1,
	0x20, 0x88, 0x94, 0x92, 0x3c, 0x17, 0x73, 0x62, 0x72, 0xb6, 0x90, 0x04, 0x17, 0x7b, 0x71, 0x69,
	0x72, 0x72, 0x6a, 0x71, 0x31, 0x58, 0x31, 0x47, 0x10, 0x8c, 0xab, 0x65, 0x00, 0x35, 0x44, 0x88,
	0x9d, 0x8b, 0xd9, 0xd3, 0x2f, 0x4c, 0x80, 0x41, 0x88, 0x93, 0x8b, 0xd5, 0x3d, 0xc8, 0xd5, 0xd5,
	0x4f, 0x80, 0x51, 0x88, 0x8b, 0x8b, 0x2d, 0xd2, 0xd5, 0xc7, 0xc7, 0x3f, 0x5c, 0x80, 0x09, 0x24,
	0x1f, 0xe4, 0xea, 0x22, 0xc0, 0x6c, 0x14, 0xc3, 0xc5, 0x06, 0x71, 0xb1, 0x90, 0x12, 0x17, 0x47,
	0x71, 0x6a, 0x89, 0x33, 0x58, 0x3b, 0x17, 0xc2, 0x76, 0x29, 0x18, 0x1b, 0x64, 0xb3, 0x1e, 0x17,
	0x47, 0x3a, 0x4c, 0x8d, 0x98, 0x1e, 0xc4, 0x57, 0x7a, 0x30, 0x5f, 0xe9, 0xb9, 0x82, 0x7c, 0x25,
	0x85, 0xa4, 0x37, 0x89, 0x0d, 0x2c, 0x67, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x11, 0xe6, 0xf6,
	0x22, 0x16, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// Ampel2Client is the client API for Ampel2 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type Ampel2Client interface {
	SetColor(ctx context.Context, in *Col, opts ...grpc.CallOption) (*Ack, error)
	GetColor(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Col, error)
}

type ampel2Client struct {
	cc grpc.ClientConnInterface
}

func NewAmpel2Client(cc grpc.ClientConnInterface) Ampel2Client {
	return &ampel2Client{cc}
}

func (c *ampel2Client) SetColor(ctx context.Context, in *Col, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/ampel.ampel2/setColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ampel2Client) GetColor(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Col, error) {
	out := new(Col)
	err := c.cc.Invoke(ctx, "/ampel.ampel2/getColor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Ampel2Server is the server API for Ampel2 service.
type Ampel2Server interface {
	SetColor(context.Context, *Col) (*Ack, error)
	GetColor(context.Context, *empty.Empty) (*Col, error)
}

// UnimplementedAmpel2Server can be embedded to have forward compatible implementations.
type UnimplementedAmpel2Server struct {
}

func (*UnimplementedAmpel2Server) SetColor(ctx context.Context, req *Col) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetColor not implemented")
}
func (*UnimplementedAmpel2Server) GetColor(ctx context.Context, req *empty.Empty) (*Col, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetColor not implemented")
}

func RegisterAmpel2Server(s *grpc.Server, srv Ampel2Server) {
	s.RegisterService(&_Ampel2_serviceDesc, srv)
}

func _Ampel2_SetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Col)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ampel2Server).SetColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ampel.ampel2/SetColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ampel2Server).SetColor(ctx, req.(*Col))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ampel2_GetColor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Ampel2Server).GetColor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ampel.ampel2/GetColor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Ampel2Server).GetColor(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ampel2_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ampel.ampel2",
	HandlerType: (*Ampel2Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "setColor",
			Handler:    _Ampel2_SetColor_Handler,
		},
		{
			MethodName: "getColor",
			Handler:    _Ampel2_GetColor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ampel2.proto",
}
